| **Phase** | **Component** | **AI Prompt** |
| :--- | :--- | :--- |
| **System Architecture & Setup** | Architecture Diagram | "Act as an AWS solutions architect. Generate a Mermaid.js architecture diagram for a cost-optimized, serverless document translation system. The system must use Angular frontend, Spring Boot backend, Python/Flask microservices on AWS Lambda, Hugging Face's 'facebook/mbart-large-50-many-to-many-mmt' model, S3 for storage, DynamoDB for job tracking, SQS for async processing, and Stripe for payments. Show encrypted data flow using AWS KMS and include CloudWatch for monitoring. Structure the diagram to emphasize serverless components for cost reduction." |
| **Project Setup** | Spring Boot Initialization | "You are an expert Java Spring Boot developer. Create a Spring Boot 3.2 application with Docker support. Include dependencies for Spring Web, Spring Security, AWS SDK v2, File Upload, and structured JSON logging. Generate the pom.xml and a main class. Implement serverless-ready configuration with environment-based profiles and async processing enabled. Include GDPR-compliant audit logging setup from the start." |
| **Frontend Setup** | Angular Application | "As a senior Angular developer, generate an Angular 17 application with Angular Material, routing, and HttpClient. Create a file upload component with drag-and-drop, language selection (50+ languages supported by MBART), and payment integration UI. Implement responsive design and structured logging. Include TypeScript interfaces for translation job status with phases: UPLOADED, PROCESSING, TRANSLATING, COMPLETED, FAILED." |
| **Core Translation Flow** | File Upload API | "As a Spring Boot expert, create a @RestController multipart file upload endpoint. Validate file type (PDF/DOCX, max 10MB). Encrypt files using AWS KMS before storing in S3. Implement async processing by sending job details to SQS. Return job ID and include GDPR audit logging. Add content moderation check for uploaded text to prevent abuse." |
| **Document Processing** | Python Microservice | "Act as a Python AWS Lambda specialist. Create a Flask endpoint for AWS Lambda that extracts text from S3-stored documents using python-docx and pdfplumber. Implement comprehensive error handling for corrupt files. Return structured JSON responses with status codes. Include virus scanning using ClamAV integration. Ensure all operations are logged in JSON format for CloudWatch analysis." |
| **Translation Integration** | Hugging Face API Call | "As a Java developer specializing in API integration, write a service method using Spring WebClient to call Hugging Face's MBART model (facebook/mbart-large-50-many-to-many-mmt). Implement retry logic with exponential backoff. Include language validation against supported 50+ languages. Add content moderation for translated output. Use structured logging for performance monitoring and cost tracking." |
| **Async Processing** | SQS Implementation | "You are an AWS messaging expert. Implement SQS integration in Spring Boot for async translation job processing. Create a service that sends messages to SQS with job details and a listener that consumes messages. Implement dead-letter queue for failed messages. Include monitoring metrics for queue length and processing time. Ensure encryption in transit and at rest." |
| **Payment Integration** | Stripe Implementation | "As a full-stack developer, integrate Stripe into Spring Boot. Create a PaymentIntent endpoint that calculates cost based on word count and language pair complexity. Implement free tier limits (500 chars/day) using Redis. Add GDPR-compliant data handling for payment information. Include webhook handling for payment confirmation and automated refunds for failed translations." |
| **Security & Compliance** | End-to-End Encryption | "Act as a security engineer. Implement end-to-end encryption using AWS KMS for all files in transit and at rest. Create S3 bucket policies that enforce encryption and generate pre-signed URLs with 15-minute expiration. Implement GDPR right-to-be-forgotten endpoint that purges all user data from S3, DynamoDB, and logs. Include audit logging for all data access." |
| **Testing** | Comprehensive Test Suite | "As a QA automation engineer, create a comprehensive test suite including: 1) JUnit tests with Mockito for service layer, 2) Integration tests with Testcontainers for local AWS services, 3) Performance tests with JMeter simulating 100+ users, 4) Security tests for encryption and injection vulnerabilities, 5) GDPR compliance tests for data deletion requests. Include structured test reporting." |
| **Deployment** | AWS CDK Infrastructure | "You are an AWS CDK expert. Write TypeScript CDK code to deploy all infrastructure: S3 buckets with encryption, DynamoDB with auto-scaling, SQS queues with dead-letter, Lambda functions with Graviton2 processors, API Gateway, and CloudFront. Implement least-privilege IAM roles. Set up canary deployment strategy for gradual rollout. Include cost allocation tags for all resources." |
| **Monitoring** | CloudWatch Dashboard | "As a DevOps engineer, create CloudWatch dashboards for monitoring: translation job metrics (status counts, processing time), system health (Lambda errors, SQS queue length), cost tracking (per-job cost estimation), and security events. Set up automated alerts for system failures, quality degradation (error rate >5%), and suspicious activities. Implement structured JSON logging throughout application." |
| **Optimization** | Cost Optimization | "Act as a cost optimization specialist. Implement Redis caching for frequent translation requests with TTL of 7 days. Migrate all Lambda functions to ARM/Graviton2 processors. Configure auto-scaling for Lambda based on SQS queue length. Set up cost allocation tags and budgeting alerts. Implement job prioritization for paid users over free tier users." |
